/*
QLineSeries *series = new QLineSeries();
series->append(0.0, 0.6);
series->append(1.0, 1.25);
series->append(2.5, 1.25);
QChart *chart = new QChart;
chart->addSeries(series);
chart->legend()->hide();
chart->setTitle("Test");
chart->createDefaultAxes();
QChartView *chartview = new QChartView(chart);

ui->graphicsView->setChart(chart);
*/

//        ui->sliderUpper->setMaximum(path.length());
//        ui->sliderUpper->setValue(ui->sliderUpper->maximum());

//        ui->sliderLower->setMinimum(0);
//        ui->sliderLower->setMaximum(ui->sliderUpper->value());
//        ui->sliderLower->setValue(ui->sliderLower->minimum());

        //ui->sliderUpper->setMaximum(path.length());
        //ui->sliderLower->setMaximum(std::min(path.length(), ui->sliderUpper->maximum()));

/*
while(!found && low < high)
{
    diff = abs(pixelValue.red()-colors.at(low).red())
               + abs(pixelValue.green()-colors.at(low).green())
               + abs(pixelValue.blue()-colors.at(low).blue());
    if(diff < THRESHOLD)
    {
        ui->labelValue->setText(QString::number(diff));
        //ui->labelValue->setText("Found");
        found = true;
    }
    low++;
}
if(low == high)
{
    ui->labelValue->setText(QString::number(diff));
    //ui->labelValue->setText("???");
}
*/

//std::cout << path.at(ct).at(0) << '\t' << path.at(ct).at(1) << '\t' << colors.at(ct).red() << '\t' << colors.at(ct).green() << '\t' << colors.at(ct).blue() << std::endl;
//red->append(path.at(ct).at(ui->radioVert->isChecked()), colors.at(ct).red());
//green->append(path.at(ct).at(ui->radioVert->isChecked()), colors.at(ct).green());
//blue->append(path.at(ct).at(ui->radioVert->isChecked()), colors.at(ct).blue());

for(int ct = low; ct <= high; ct++)
{
    //std::cout << path.at(ct).at(ui->radioVert->isChecked()) << ',' << colors.at(ct).red() << ',' << colors.at(ct).green() << ',' << colors.at(ct).blue() << std::endl;
}
//std::cout << std::endl;


//std::cout << index << '\t' << index+1 << std::endl;

/*
int low = std::min(ui->spinLBound->value(), ui->spinUBound->value());
int high = std::max(ui->spinLBound->value(), ui->spinUBound->value());

int current;
int diff = 255;
int index = high;

for(int ct = low; ct < high; ct++)
{
    current = abs(pixelValue.red()-colors.at(ct).red()) + abs(pixelValue.green()-colors.at(ct).green()) + abs(pixelValue.blue()-colors.at(ct).blue());
    if(current < diff)
    {
        diff = current;
        index = ct;
    }
}
*/



//        ui->labelValue->setText(QString::number(step));

//        ui->labelValue->setText(QString::number(steps.at(N)));
//        //std::cout << std::endl;
//        QList<int> keys;

//        int chunk = (ui->spinUBound->value()-ui->spinLBound->value())/(N-1);
//        double chunk = (high-low)/(N-1);
//        ui->labelValue->setText(QString::number(chunk));

//        while(index-low < chunk*ct)
//        {
//            ct++;
//        }
//std::cout << ct-1 << '\t' << ct << std::endl;

//std::cout << 1.0/chunk*(index-low) << std::endl;

//        if(index != high )
//        {
//        int something = 1+(index-low)/chunk;
//        std::cout << index << '\t' << low << '\t' << steps.at(something) << '\t' << steps.at(something+1) << std::endl;
//        //ui->labelValue->setText(QString::number(steps.at(something-1)) + "\t" + QString::number(steps.at(something)));
//        }
//        int ct = 0;
//        std::cout << index << '\t' << low+ct*chunk << std::endl;
//        ct++;
//        std::cout << index << '\t' << low+ct*chunk << std::endl;
//        while(index < low+ct*chunk)
//        {
//            std::cout << index << '\t' << low+ct*chunk << std::endl;
//            ct++;
//        }

//ui->labelValue->setText(QString::number(ct));

//
//ui->labelValue->setText(QString::number(index/chunk - low/chunk));

//        int ct = 0;
//        while(index > ui->spinLBound->text().toDouble()+chunk*ct)
//        {
//            ct++;
//        }
//        ui->labelValue->setText(legend.at(ct) + "\t" + legend.at(ct+1));
//ui->labelValue->setText(QString::number(chunk));

//double value = ui->lineLegendMin->text().toDouble();
//value += double(index-low)/double(high-low)*(ui->lineLegendMax->text().toDouble()-ui->lineLegendMin->text().toDouble());

//ui->labelValue->setText(QString::number(value, 'e', 4));
